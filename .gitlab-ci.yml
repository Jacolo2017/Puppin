stages:
  - test # Run tests first
  - build # Run build after tests
  - deploy


# services:
#   - postgres: 14.2-bullseye

variables:
  POSTGRES_PASSWORD: puppin
  POSTGRES_USER: puppin
  POSTGRES_DB: puppin
  DATABASE_URL: postgres://puppin:puppin@postgres:5432/puppin 


api-unit-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - cd puppin
    - cd api
    - pip install -r requirements.txt
    - export DATABASE_URL 
    - python -m pytest  # Run unit tests

lint-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - pip install flake8
    - flake8 puppin  # Run flake8 on Python project to check
                  # for code quality

front-end-build-job:
  stage: build
  image: node:lts-bullseye
  needs:
    - api-unit-test-job  # These two jobs must succeed for
    - lint-test-job      # this build-job to run
  script:
    - cd ghi
    - npm install
    - npm run build  # Build the React application

build-back-end-job:
  rules:
    # Only run if the commit is on the main branch
    - if: ($CI_COMMIT_BRANCH == "deploy" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - cd api
    - docker build -t ${CI_REGISTRY_IMAGE}/puppin:latest .
    - docker tag ${CI_REGISTRY_IMAGE}/api:latest ${CI_REGISTRY_IMAGE}/puppin:$CI_JOB_ID
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push ${CI_REGISTRY_IMAGE}/api:$CI_JOB_ID
    - docker push ${CI_REGISTRY_IMAGE}/api:latest

# api-unit-test-job:
#   image: python:3-bullseye
#   stage: test
#   script:
#     - cd api
#     - pip install -r requirements.txt
#     - python -m pytest # Run unit tests

# lint-test-job:
#   image: python:3-bullseye
#   stage: test
#   script:
#     - pip install flake8
#     - flake8 puppin # Run flake8 on Python project to check
#       # for code quality

# build-front-end-job:
#   rules:
#     # Only run if the commit is on the main branch
#     - if: ($CI_COMMIT_BRANCH == "deploy" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)
#   stage: build
#   image: node:lts-bullseye
#   needs:
#     - api-unit-test-job  # These two jobs must succeed for
#     - lint-test-job      # this build-job to run
#   script: # What is getting typed in the terminal
#     - cd ghi/app
#     - npm install
#     - npm run build  # Build the React application
#     - cp build/index.html build/404.html
#   artifacts:
#     paths:
#       - ghi/app/build/  # Save all of the files in the build path

# build-back-end-job:
#   rules:
#     # Only run if the commit is on the main branch
#     - if: ($CI_COMMIT_BRANCH == "deploy" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)
#   stage: build
#   image: docker:20.10.16
#   services:
#     - docker:20.10.16-dind
#   script:
#     - cd api
#     - docker build -t ${CI_REGISTRY_IMAGE}/profiles_api:latest .
#     - docker tag ${CI_REGISTRY_IMAGE}/api:latest ${CI_REGISTRY_IMAGE}/profiles_api:$CI_JOB_ID
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
#     - docker push ${CI_REGISTRY_IMAGE}/api:$CI_JOB_ID
#     - docker push ${CI_REGISTRY_IMAGE}/api:latest


