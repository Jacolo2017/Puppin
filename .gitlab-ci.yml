stages:
  - test # Run tests first
  - build # Run build after tests
  - deploy

# services:
#   - postgres: 14.2-bullseye

variables:
  POSTGRES_PASSWORD: puppin
  POSTGRES_USER: puppin
  POSTGRES_DB: puppin
  DATABASE_URL: postgres://puppin:puppin@postgres:5432/puppin

api-unit-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - cd puppin
    - cd api
    - pip install -r requirements.txt
    - export DATABASE_URL
    - python -m pytest # Run unit tests

# lint-test-job:
#   image: python:3-bullseye
#   stage: test
#   script:
#     - pip install flake8
#     - flake8 puppin  # Run flake8 on Python project to check
# for code quality

front-end-build-job:
  stage: build
  image: node:lts-bullseye
  variables:
    PUBLIC_URL: https://purely-puptonic.gitlab.io/puppin
  needs:
    - api-unit-test-job # These two jobs must succeed for
    # - lint-test-job      # this build-job to run
  script:
    - cd ghi
    - cd app
    - npm install
    - npm install framer-motion
    - npm install swiper
    - npm install react-icons
    - npm install -D tailwindcss
    - npm install -D postcss
    - npm install -D autoprefixer
    - npm install react-hook-form
    - npm install react-datepicker --save
    - npm run build
    - cp build/index.html build/404.html # Build the React application
  artifacts:
    paths:
      - ghi/app/build/ # Save all of the files in the build path

build-puppin-job:
  rules:
    # Only run if the commit is on the main branch
    - if: ($CI_COMMIT_BRANCH == "deploy" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - ls
    - cd puppin
    - cd api
    - docker build -t ${CI_REGISTRY_IMAGE}/puppin:latest .
    - docker tag ${CI_REGISTRY_IMAGE}/puppin:latest ${CI_REGISTRY_IMAGE}/puppin:$CI_JOB_ID
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push ${CI_REGISTRY_IMAGE}/puppin:$CI_JOB_ID
    - docker push ${CI_REGISTRY_IMAGE}/puppin:latest
  
deploy-puppin-job:  # RENAME THIS
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: deploy
  image: docker:20.10.16
  needs:
    # CHANGE THIS TO THE JOB NAME FROM THE LAST STEP
    - build-puppin-job
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com

    # EVERYWHERE IT SHOWS fastapi_api BELOW, CHANGE THOSE
    # TO THE NAME YOU CHOSE FOR THE BUILD STEP (2 PLACES)

    # EVERYWHERE IT SHOWS HEROKU_SERVICE_APP BELOW, CHANGE
    # THOSE TO THE VARIABLE NAME YOU CREATED FOR THE CI/CD
    # SETTINGS (2 PLACES)

    # IF THIS IS FOR A BACKGROUND SERVICE LIKE A POLLER,
    # CHANGE /web TO /worker (2 PLACES)
    - docker pull ${CI_REGISTRY_IMAGE}/puppin:latest
    - docker tag ${CI_REGISTRY_IMAGE}/puppin:latest registry.heroku.com/puppin/web:latest
    - docker push registry.heroku.com/puppin/web:latest



release-puppin:  # RENAME THIS
  stage: deploy
  image: node:10.17-alpine
  needs:
    # CHANGE THIS TO THE JOB NAME FROM THE LAST STEP
    - deploy-puppin-job
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - apk add curl bash
    - curl https://cli-assets.heroku.com/install.sh | sh
  script:
    # EVERYWHERE IT SHOWS HEROKU_SERVICE_APP BELOW, CHANGE
    # THOSE TO THE VARIABLE NAME YOU CREATED FOR THE CI/CD
    # SETTINGS (1 PLACE)

    # IF THIS IS FOR A BACKGROUND SERVICE LIKE A POLLER,
    # CHANGE web TO worker (1 PLACE)
    - heroku container:release web --app puppin
# api-unit-test-job:
#   image: python:3-bullseye
#   stage: test
#   script:
#     - cd api
#     - pip install -r requirements.txt
#     - python -m pytest # Run unit tests

# lint-test-job:
#   image: python:3-bullseye
#   stage: test
#   script:
#     - pip install flake8
#     - flake8 puppin # Run flake8 on Python project to check
#       # for code quality

# build-front-end-job:
#   rules:
#     # Only run if the commit is on the main branch
#     - if: ($CI_COMMIT_BRANCH == "deploy" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)
#   stage: build
#   image: node:lts-bullseye
#   needs:
#     - api-unit-test-job  # These two jobs must succeed for
#     - lint-test-job      # this build-job to run
#   script: # What is getting typed in the terminal
#     - cd ghi/app
#     - npm install
#     - npm run build  # Build the React application
#     - cp build/index.html build/404.html
#   artifacts:
#     paths:
#       - ghi/app/build/  # Save all of the files in the build path

# build-back-end-job:
#   rules:
#     # Only run if the commit is on the main branch
#     - if: ($CI_COMMIT_BRANCH == "deploy" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)
#   stage: build
#   image: docker:20.10.16
#   services:
#     - docker:20.10.16-dind
#   script:
#     - cd api
#     - docker build -t ${CI_REGISTRY_IMAGE}/profiles_api:latest .
#     - docker tag ${CI_REGISTRY_IMAGE}/api:latest ${CI_REGISTRY_IMAGE}/profiles_api:$CI_JOB_ID
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
#     - docker push ${CI_REGISTRY_IMAGE}/api:$CI_JOB_ID
#     - docker push ${CI_REGISTRY_IMAGE}/api:latest

